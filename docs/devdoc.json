{
	"author": "Blockben",
	"methods": {
		"addBNOXAdmin(address)": {
			"details": "...",
			"params": {
				"account": "The address of the account to be added"
			}
		},
		"addKYCAdmin(address)": {
			"details": "...",
			"params": {
				"account": "The address of the account to be added"
			}
		},
		"addTreasuryAdmin(address)": {
			"details": "...",
			"params": {
				"account": "The address of the account to be added"
			}
		},
		"allowance(address,address)": {
			"details": "See {IERC20-allowance}."
		},
		"approve(address,uint256)": {
			"details": "...",
			"params": {
				"spender": "The address to be approved",
				"value": "The amount of token to be allowed to be transferred"
			}
		},
		"balanceOf(address)": {
			"details": "See {IERC20-balanceOf}."
		},
		"burn(uint256)": {
			"details": "...",
			"params": {
				"amount": "The amount of token to be burned"
			}
		},
		"constructor": {
			"details": "Not working with decimal numbers",
			"params": {
				"superadmin": "superadmnin of the token"
			}
		},
		"decimals()": {
			"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`).     * Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei.     * NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
		},
		"decreaseAllowance(address,uint256)": {
			"details": "...",
			"params": {
				"spender": "The address to be approved",
				"subtractedValue": "The amount of token to be allowed to be transferred"
			}
		},
		"getDestinationAccountWL(address)": {
			"details": "...",
			"params": {
				"destinationAddress": "The address of the account to be checked"
			}
		},
		"getSourceAccountWL(address)": {
			"details": "...",
			"params": {
				"sourceAddress": "The address of the account to be checked"
			}
		},
		"increaseAllowance(address,uint256)": {
			"details": "...",
			"params": {
				"addedValue": "The amount of token to be allowed to be transferred",
				"spender": "The address to be approved"
			}
		},
		"isBNOXAdmin(address)": {
			"details": "...",
			"params": {
				"account": "The address of the account to be checked"
			},
			"return": "true if the account is an admin"
		},
		"isKYCAdmin(address)": {
			"details": "...",
			"params": {
				"account": "The address of the account to be checked"
			},
			"return": "true if the account is a KYC admin"
		},
		"isTreasuryAdmin(address)": {
			"details": "...",
			"params": {
				"account": "The address of the account to be checked"
			},
			"return": "true if the account is a treasury admin"
		},
		"kill(address)": {
			"details": "...",
			"params": {
				"toChashOut": "The address where the ether of the token should be sent"
			}
		},
		"mint(address,uint256)": {
			"details": "...",
			"params": {
				"account": "The address of the account to be minted",
				"amount": "The amount of token to be minted"
			},
			"return": "true if everything is cool"
		},
		"name()": {
			"details": "Returns the name of the token."
		},
		"pause()": {
			"details": "..."
		},
		"removeBNOXAdmin(address)": {
			"details": "...",
			"params": {
				"account": "The address of the account to be added"
			}
		},
		"removeKYCAdmin(address)": {
			"details": "...",
			"params": {
				"account": "The address of the account to be removed"
			}
		},
		"removeTreasuryAdmin(address)": {
			"details": "...",
			"params": {
				"account": "The address of the account to be removed"
			}
		},
		"setBsoFee(uint16)": {
			"details": "...",
			"params": {
				"newFee": "The new fee to set"
			}
		},
		"setBsopoolAddress(address)": {
			"details": "...",
			"params": {
				"newAddress": "The new address to set"
			}
		},
		"setDestinationAccountWL(address,bool)": {
			"details": "...",
			"params": {
				"destinationAddress": "The address of the account to be checked"
			}
		},
		"setFeeAddress(address)": {
			"details": "...",
			"params": {
				"newAddress": "The new address to set"
			}
		},
		"setGeneralFee(uint16)": {
			"details": "...",
			"params": {
				"newFee": "The new fee to set"
			}
		},
		"setSourceAccountWL(address,bool)": {
			"details": "...",
			"params": {
				"sourceAddress": "The address of the account to be checked"
			}
		},
		"setTreasuryAddress(address)": {
			"details": "...",
			"params": {
				"newAddress": "The new address to set"
			}
		},
		"setUrl(string)": {
			"details": "...",
			"params": {
				"newUrl": "The new url"
			}
		},
		"symbol()": {
			"details": "Returns the symbol of the token, usually a shorter version of the name."
		},
		"totalSupply()": {
			"details": "See {IERC20-totalSupply}."
		},
		"transfer(address,uint256)": {
			"details": "...",
			"params": {
				"to": "The address of the account to be transferred",
				"value": "The amount of token to be transferred"
			},
			"return": "true if everything is cool"
		},
		"transferFrom(address,address,uint256)": {
			"details": "...",
			"params": {
				"from": "The address transferred from",
				"to": "The amount transferred to",
				"value": "The amount of token to be transferred"
			}
		},
		"unpause()": {
			"details": "..."
		}
	},
	"title": "BNOXToken"
}